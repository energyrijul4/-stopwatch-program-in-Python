import tkinter as tk
from tkinter import messagebox, filedialog
import time
import csv
import json
import os
from datetime import timedelta

class StopwatchApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Complex Stopwatch")
        self.root.geometry("800x600")
        
        # List to store stopwatch instances
        self.timers = []
        self.timer_count = 0
        
        # GUI Elements
        self.setup_gui()
        
    def setup_gui(self):
        # Frame for controls
        self.control_frame = tk.Frame(self.root)
        self.control_frame.pack(pady=10)
        
        # Add new timer
        tk.Label(self.control_frame, text="Timer Name:").pack(side=tk.LEFT, padx=5)
        self.name_entry = tk.Entry(self.control_frame)
        self.name_entry.pack(side=tk.LEFT, padx=5)
        tk.Button(self.control_frame, text="Add Timer", command=self.add_timer).pack(side=tk.LEFT, padx=5)
        
        # Global controls
        tk.Button(self.control_frame, text="Save Session", command=self.save_session).pack(side=tk.LEFT, padx=5)
        tk.Button(self.control_frame, text="Load Session", command=self.load_session).pack(side=tk.LEFT, padx=5)
        tk.Button(self.control_frame, text="Export to CSV", command=self.export_to_csv).pack(side=tk.LEFT, padx=5)
        
        # Canvas for timers
        self.canvas = tk.Canvas(self.root)
        self.scrollbar = tk.Scrollbar(self.root, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        
    def add_timer(self):
        name = self.name_entry.get().strip() or f"Timer {self.timer_count + 1}"
        timer_frame = tk.Frame(self.scrollable_frame)
        timer_frame.pack(fill=tk.X, pady=5)
        
        timer = {
            "name": name,
            "frame": timer_frame,
            "start_time": None,
            "elapsed_time": 0,
            "running": False,
            "laps": [],
            "label": tk.Label(timer_frame, text=f"{name}: 00:00:00.000", font=("Arial", 12)),
            "start_button": tk.Button(timer_frame, text="Start", command=lambda: self.start_timer(timer)),
            "pause_button": tk.Button(timer_frame, text="Pause", command=lambda: self.pause_timer(timer), state=tk.DISABLED),
            "lap_button": tk.Button(timer_frame, text="Lap", command=lambda: self.record_lap(timer), state=tk.DISABLED),
            "reset_button": tk.Button(timer_frame, text="Reset", command=lambda: self.reset_timer(timer)),
            "lap_display": tk.Text(timer_frame, height=5, width=50, state=tk.DISABLED)
        }
        
        # Layout timer controls
        timer["label"].pack(side=tk.LEFT, padx=5)
        timer["start_button"].pack(side=tk.LEFT, padx=5)
        timer["pause_button"].pack(side=tk.LEFT, padx=5)
        timer["lap_button"].pack(side=tk.LEFT, padx=5)
        timer["reset_button"].pack(side=tk.LEFT, padx=5)
        timer["lap_display"].pack(side=tk.LEFT, padx=5)
        
        self.timers.append(timer)
        self.timer_count += 1
        self.name_entry.delete(0, tk.END)
        
    def start_timer(self, timer):
        if not timer["running"]:
            timer["running"] = True
            timer["start_time"] = time.time() - timer["elapsed_time"]
            timer["start_button"].config(state=tk.DISABLED)
            timer["pause_button"].config(state=tk.NORMAL)
            timer["lap_button"].config(state=tk.NORMAL)
            self.update_timer(timer)
            
    def pause_timer(self, timer):
        if timer["running"]:
            timer["running"] = False
            timer["elapsed_time"] = time.time() - timer["start_time"]
            timer["start_button"].config(state=tk.NORMAL)
            timer["pause_button"].config(state=tk.DISABLED)
            timer["lap_button"].config(state=tk.DISABLED)
            
    def reset_timer(self, timer):
        timer["running"] = False
        timer["elapsed_time"] = 0
        timer["start_time"] = None
        timer["laps"] = []
        timer["label"].config(text=f"{timer['name']}: 00:00:00.000")
        timer["start_button"].config(state=tk.NORMAL)
        timer["pause_button"].config(state=tk.DISABLED)
        timer["lap_button"].config(state=tk.DISABLED)
        timer["lap_display"].config(state=tk.NORMAL)
        timer["lap_display"].delete(1.0, tk.END)
        timer["lap_display"].config(state=tk.DISABLED)
        
    def record_lap(self, timer):
        if timer["running"]:
            current_time = time.time() - timer["start_time"]
            lap_time = current_time - (timer["laps"][-1][1] if timer["laps"] else 0)
            timer["laps"].append((len(timer["laps"]) + 1, current_time, lap_time))
            self.update_lap_display(timer)
            
    def update_lap_display(self, timer):
        timer["lap_display"].config(state=tk.NORMAL)
        timer["lap_display"].delete(1.0, tk.END)
        for lap_num, split_time, lap_time in timer["laps"]:
            split_str = str(timedelta(seconds=split_time))[:-3]
            lap_str = str(timedelta(seconds=lap_time))[:-3]
            timer["lap_display"].insert(tk.END, f"Lap {lap_num}: Split: {split_str}, Lap Time: {lap_str}\n")
        timer["lap_display"].config(state=tk.DISABLED)
        
    def update_timer(self, timer):
        if timer["running"]:
            timer["elapsed_time"] = time.time() - timer["start_time"]
            timer["label"].config(text=f"{timer['name']}: {str(timedelta(seconds=timer['elapsed_time']))[:-3]}")
            self.root.after(50, lambda: self.update_timer(timer))
            
    def save_session(self):
        session_data = []
        for timer in self.timers:
            session_data.append({
                "name": timer["name"],
                "elapsed_time": timer["elapsed_time"],
                "running": timer["running"],
                "laps": timer["laps"]
            })
        file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, "w") as f:
                json.dump(session_data, f, indent=4)
            messagebox.showinfo("Success", "Session saved successfully!")
            
    def load_session(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path and os.path.exists(file_path):
            with open(file_path, "r") as f:
                session_data = json.load(f)
            
            # Clear existing timers
            for timer in self.timers:
                timer["frame"].destroy()
            self.timers = []
            self.timer_count = 0
            
            # Load new timers
            for data in session_data:
                self.add_timer()
                timer = self.timers[-1]
                timer["name"] = data["name"]
                timer["elapsed_time"] = data["elapsed_time"]
                timer["laps"] = data["laps"]
                timer["label"].config(text=f"{timer['name']}: {str(timedelta(seconds=timer['elapsed_time']))[:-3]}")
                if data["running"]:
                    timer["start_time"] = time.time() - timer["elapsed_time"]
                    timer["running"] = True
                    timer["start_button"].config(state=tk.DISABLED)
                    timer["pause_button"].config(state=tk.NORMAL)
                    timer["lap_button"].config(state=tk.NORMAL)
                    self.update_timer(timer)
                self.update_lap_display(timer)
            messagebox.showinfo("Success", "Session loaded successfully!")
            
    def export_to_csv(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
        if file_path:
            with open(file_path, "w", newline="") as f:
                writer = csv.writer(f)
                writer.writerow(["Timer Name", "Elapsed Time", "Lap Number", "Split Time", "Lap Time"])
                for timer in self.timers:
                    elapsed_str = str(timedelta(seconds=timer["elapsed_time"]))[:-3]
                    for lap_num, split_time, lap_time in timer["laps"]:
                        split_str = str(timedelta(seconds=split_time))[:-3]
                        lap_str = str(timedelta(seconds=lap_time))[:-3]
                        writer.writerow([timer["name"], elapsed_str, lap_num, split_str, lap_str])
                    if not timer["laps"]:
                        writer.writerow([timer["name"], elapsed_str, "", "", ""])
            messagebox.showinfo("Success", "Exported to CSV successfully!")

if __name__ == "__main__":
    root = tk.Tk()
    app = StopwatchApp(root)
    root.mainloop()
